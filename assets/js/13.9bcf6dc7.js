(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{302:function(t,a,s){t.exports=s.p+"assets/img/wenkai.361b4529.png"},352:function(t,a,s){"use strict";s.r(a);var r=s(5),e=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("之前总喜欢鼓捣网页的界面，但不管怎么弄总觉得差点意思，前一个月偶然看到了一个"),a("a",{attrs:{href:"https://practicaltypography.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("讲文字排版的网站"),a("OutboundLink")],1),t._v("，里面提到了字体的重要性，我也逐渐意识到了之前缺失的那一环。\n正好这几天发现了一款很好看的字体，立马搬到了博客上，不过也遇到了一些奇怪的问题，故记录一下。")]),t._v(" "),a("h1",{attrs:{id:"我选择了什么字体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#我选择了什么字体"}},[t._v("#")]),t._v(" 我选择了什么字体")]),t._v(" "),a("p",[a("img",{attrs:{src:s(302),alt:"wenkai"}})]),t._v(" "),a("p",[t._v("字体的名字是"),a("strong",[t._v("霞鹜文楷")]),t._v("，作者的网站在"),a("a",{attrs:{href:"https://lxgw.github.io/2021/04/27/Wenkai-Update/",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),a("OutboundLink")],1),t._v("。我觉得这款字体不花哨，但也不是呆板，看着比较舒服。")]),t._v(" "),a("p",[t._v("同时这款字体也是开源的，不用担心版权的问题，这里要感谢一下作者的辛苦劳动。")]),t._v(" "),a("h1",{attrs:{id:"如何加入字体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何加入字体"}},[t._v("#")]),t._v(" 如何加入字体？")]),t._v(" "),a("p",[t._v("想要加入字体到博客中，也是比较简单，虽然和使用的博客系统有一定关系，但主要的设置还是一样的。")]),t._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token atrule"}},[a("span",{pre:!0,attrs:{class:"token rule"}},[t._v("@font-face")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("font-family")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'LXGW'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("src")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token url"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("url")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string url"}},[t._v("'~fonts/lxgw.ttf'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("format")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'truetype'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("font-weight")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 400"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("需要注意的是，这里要设置"),a("code",[t._v("format('truetype')")]),t._v("，如果是"),a("code",[t._v("format('ttf')")]),t._v("的话，就无法正常显示了。")]),t._v(" "),a("h1",{attrs:{id:"如何缩减字体大小"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何缩减字体大小"}},[t._v("#")]),t._v(" 如何缩减字体大小")]),t._v(" "),a("p",[t._v("本来到这一步，已经正常把字体显示出来了，已经可以心满意足地欣赏了，但由于字体文件比较大，每次需要半分钟才能加载出来，这是很难以接受的，正常来说，字体还没加载出来，读者就已经离开了XD。")]),t._v(" "),a("p",[t._v("于是下一步就是缩减字体的大小，但没想到，这才是噩梦的开始。")]),t._v(" "),a("h2",{attrs:{id:"选用什么工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#选用什么工具"}},[t._v("#")]),t._v(" 选用什么工具")]),t._v(" "),a("p",[t._v("简单搜索之后，发现可以使用"),a("a",{attrs:{href:"https://github.com/aui/font-spider",target:"_blank",rel:"noopener noreferrer"}},[t._v("Font-Spider"),a("OutboundLink")],1),t._v("来根据需要自动缩减字体文件，但可能是我使用方式不对，我并没有能够成功使用它，也就不折腾了。之后参考"),a("a",{attrs:{href:"https://hsingko.github.io/post/compress_webfont/",target:"_blank",rel:"noopener noreferrer"}},[t._v("这篇博文"),a("OutboundLink")],1),t._v("的做法，使用"),a("code",[t._v("grep")]),t._v("和"),a("code",[t._v("fonttools")]),t._v("来提取文字并缩减字体文件。\n具体做法如下：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("pyftsubset "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fonts/'),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$origin")]),t._v('"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--text")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),t._v("rg ./ "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-e")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'[\\w\\d]'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-oN")]),t._v(" --no-filename"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("uniq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tr")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-d")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\n'")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v(" --no-hinting\n")])])]),a("p",[a("code",[t._v("pyftsubset")]),t._v("可以根据我们提供的字库来缩减字体文件，所以关键是如何取得我们需要用到的字库。"),a("code",[t._v("rg ./ -e '[\\w\\d]' -oN --no-filename|sort|uniq|tr -d '\\n'")]),t._v("先通过"),a("code",[t._v("ripgrep")]),t._v("找出当前路径下所有的字，然后进行排列和去重，再去掉换行符，便可以得到我们需要的字库。这种方法确实还是比较简洁的，通过更改正则，我们也可以控制字库中包含哪些字。")]),t._v(" "),a("p",[t._v("在本地以及Docker镜像中运行都没有什么问题。")]),t._v(" "),a("h2",{attrs:{id:"gitlab-ci的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitlab-ci的问题"}},[t._v("#")]),t._v(" Gitlab CI的问题")]),t._v(" "),a("p",[t._v("我的博客在每次提交之后，会通过Gitlab CI｜CD进行自动部署，理想情况下，可以将缩减字体这个过程也放在CI中，但是运行之后发现"),a("code",[t._v("rg -e '[\\w\\d]' -oN --no-filename|sort|uniq|tr -d '\\n'")]),t._v("出错了，并且没有错误信息，直接退出，返回值还是0。在不断尝试，包括更改CI使用的镜像，逐行echo之后，发现可能是Gitlab CI的一个"),a("strong",[t._v("特性")]),t._v("。")]),t._v(" "),a("p",[t._v("原博文中使用的命令是"),a("code",[t._v("rg -e '[\\w\\d]'")]),t._v("，并没有指定搜索路径，这个时候"),a("code",[t._v("ripgrep")]),t._v("会根据"),a("code",[t._v("stdin")]),t._v("是否开启来决定要不要搜索当前路径。而Gitlab在CI中其实开启了"),a("code",[t._v("stdin")]),t._v("，但是并没有写入内容，这个时候"),a("code",[t._v("ripgrep")]),t._v("就会等待"),a("code",[t._v("stdin")]),t._v("而卡住，然后超时退出。详情可以在这个"),a("a",{attrs:{href:"https://github.com/BurntSushi/ripgrep/issues/1630",target:"_blank",rel:"noopener noreferrer"}},[t._v("issue"),a("OutboundLink")],1),t._v("中看到。")]),t._v(" "),a("p",[t._v("调整完之后，细细想了想，还是自己的问题，没有认真思考命令的具体使用方式，以后还是要理解清楚，再去使用。")]),t._v(" "),a("h1",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),a("p",[t._v("更换字体之后，感觉看着更舒服了，看了一些介绍文字排版的视频之后，感觉排版还是很重要的，但其实被大家有所忽略。抽空看完那本介绍排版的书，希望能理解更深刻一些。")])])}),[],!1,null,null,null);a.default=e.exports}}]);