(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{306:function(t,a,s){t.exports=s.p+"assets/img/structure.0eb99845.png"},356:function(t,a,s){"use strict";s.r(a);var n=s(5),r=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"如何从源码编译pytorch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何从源码编译pytorch"}},[t._v("#")]),t._v(" 如何从源码编译Pytorch？")]),t._v(" "),a("p",[t._v("阅读Pytorch的源码的第一步，首先要获取Pytorch的源代码，然后自己构建一下Pytorch，这样可以对Pytorch有一个粗略的了解，比如Pytorch包含哪些模块，每一个模块的作用是什么，这对我们后续阅读源码会有帮助，本文假设，读者有一定的编码经验，因此不会介绍过多细节。")]),t._v(" "),a("p",[t._v("之前说到，本系列会从"),a("code",[t._v("v0.3.0")]),t._v("开始，一步一步阅读，这样的考虑主要是因为，从"),a("code",[t._v("v0.4.0")]),t._v("开始，Pytorch架构发生了较大的改变，从低版本开始阅读更容易把握到Pytorch的架构。")]),t._v(" "),a("p",[t._v("但之前也有读者提到，"),a("code",[t._v("v0.3.0")]),t._v("确实是太过于古老，接着这次重新编译Pytorch的机会，我们将源码升级到最新（截止目前，最新版本为"),a("code",[t._v("v1.9")]),t._v("），之后的阅读也会直接从"),a("code",[t._v("v1.9")]),t._v("出发，方便各位读者学习更新的内容，话不多说，我们正式开始，先做一些准备工作。")]),t._v(" "),a("h2",{attrs:{id:"前期准备工作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前期准备工作"}},[t._v("#")]),t._v(" 前期准备工作")]),t._v(" "),a("p",[t._v("与Pytorch官方文档中一致，我们也使用Conda来管理环境。简单介绍一下Conda，Conda可以为我们创建出若干隔离的环境，在每个环境中，我们都可以按需求安装一些库和软件，这样的隔离可以方便我们排除一些干扰。Conda还有一些好处，比如可以为环境指定Python版本，同时也可以方便地使用不同版本的Python。")]),t._v(" "),a("p",[t._v("首先我们使用Conda创建一个环境。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("conda create "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-n")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pytorch"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("PYTHON")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.6")]),t._v("\nconda activate pytorch\n")])])]),a("p",[t._v('使用上面的指令，我们创建了一个名字为"pytorch"的环境，使用Python3.6，这里使用Python3.6是出于兼容性考虑。')]),t._v(" "),a("p",[t._v("本文使用Ubuntu18.04作为宿主机。接下来安装一些必要的库：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("conda "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" numpy ninja pyyaml mkl mkl-include setuptools cmake cffi typing_extensions "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n   future six requests dataclasses magma-cuda110 lapack "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-c")]),t._v(" pytorch "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-c")]),t._v(" conda-forge\n")])])]),a("p",[t._v("Conda会在当前环境里为我们安装这些依赖，使用Windows或者MacOS的读者，需要根据官方仓库中的说明，安装对应的依赖。")]),t._v(" "),a("h2",{attrs:{id:"开始编译"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开始编译"}},[t._v("#")]),t._v(" 开始编译")]),t._v(" "),a("p",[t._v("完成上述步骤后，我们正式开始编译，首先获取源码。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用git从Github上克隆源码，注意 --recursive 是必要的，因为我们需要克隆第三方依赖库。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--recursive")]),t._v(" https://github.com/pytorch/pytorch\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" pytorch\n")])])]),a("p",[t._v("获取源码后，首先检查一下"),a("code",[t._v("third_party")]),t._v("文件夹中是否有文件，如果没有文件或文件不全的话，需要运行如下命令获取这些依赖：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 更新子模块")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" submodule "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sync")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" submodule update "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--init")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--recursive")]),t._v("\n")])])]),a("p",[t._v("之后我们可以开始编译了。要确保，系统中已经安装好"),a("code",[t._v("cmake")]),t._v("，Conda中已经安装了Cmake。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 安装torch到python的库目录")]),t._v("\npython setup.py "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 只编译不进行安装")]),t._v("\npython setup.py develop \n")])])]),a("p",[t._v("注意在这里，我们选择"),a("code",[t._v("develop")]),t._v("作为setup的选项，这样的话，编译好的文件将不会安装到Python的目录中，这样可以避免我们自己编译的库与其他安装的库发生冲突。\n正常完成编译，没有错误之后，再进行下一步。")]),t._v(" "),a("h1",{attrs:{id:"pytorch编译过程解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pytorch编译过程解析"}},[t._v("#")]),t._v(" Pytorch编译过程解析")]),t._v(" "),a("p",[t._v("Pytorch混合了多种语言，主要是Python与C++，于是从源码编译要求读者对C++也有一定了解，比如知晓C++程序的编译过程。为了处理大型C++项目，Pytorch中也使用了CMake作为组织整个项目的工具，不熟悉Cmake的读者，不妨先去了解一下什么是CMake。")]),t._v(" "),a("h2",{attrs:{id:"cmake-简要介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cmake-简要介绍"}},[t._v("#")]),t._v(" Cmake 简要介绍")]),t._v(" "),a("p",[t._v("Cmake是一个广泛使用的构建系统生成器（Build System Generator），用来组织C++项目，然后生成一系列编译指令，交给构建系统（Build System），最终生成出一个可执行文件或是库文件。")]),t._v(" "),a("p",[t._v("举个简单的例子，我们想要盖一个商场，首先需要一个建筑的图纸，然后将图纸交给施工队，施工队帮我们完成商场的建设。于是我们先用Cmake这个工具，画一个蓝图出来，然后交给施工队（make，ninja）就能得到我们想要的商场，这个过程中，源代码就像是砖头和其他建材。")]),t._v(" "),a("p",[t._v("Cmake需要一系列"),a("code",[t._v("CMakeLists.txt")]),t._v("来发挥作用，我们就在这个文件中，编写如何生成最后的程序。每一个文件夹中会有一个"),a("code",[t._v("CMakeLists")]),t._v("，这样Cmake便可以组织起整个目录。")]),t._v(" "),a("p",[t._v("这里给出一个简单的cmake工程，文件目录如下：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n├── CMakeLists.txt\n├── Demo\n│   └── CMakeLists.txt\n└── Hello\n    └── CMakeLists.txt\n")])])]),a("h3",{attrs:{id:"root"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#root"}},[t._v("#")]),t._v(" root")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("cmake_minimum_required "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("VERSION "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.8")]),t._v(".11"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nproject "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("HELLO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nadd_subdirectory "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Hello"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nadd_subdirectory "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Demo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"hello"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hello"}},[t._v("#")]),t._v(" Hello")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("add_library "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Hello hello.cxx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ntarget_include_directories "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Hello PUBLIC "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${CMAKE_CURRENT_SOURCE_DIR}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"demo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#demo"}},[t._v("#")]),t._v(" Demo")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("add_executable "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("helloDemo demo.cxx demo_b.cxx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ntarget_link_libraries "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("helloDemo LINK_PUBLIC Hello"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("在根目录中，我们指明工程名字是"),a("code",[t._v("HELLO")]),t._v("，在Hello文件夹中，我们生成了一个叫做"),a("code",[t._v("Hello")]),t._v("的静态库，在Demo文件夹中，我们生成一个叫做"),a("code",[t._v("helloDemo")]),t._v("的可执行文件，并与"),a("code",[t._v("Hello")]),t._v("库进行链接，然后得到最终的可执行文件。这个例子虽然简单，但几乎所有的Cmake工程，都会遵循这样的一个范式，理解这样编译的流程，对我们理解Pytorch编译很有帮助。")]),t._v(" "),a("p",[t._v("再次建议想要阅读源码的读者先去系统地学习一下Cmake，否则将无法了解Pytorch的构建过程。接下来，我们正式开始看一下Pytorch的整个构建过程。")]),t._v(" "),a("h2",{attrs:{id:"setup-py"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setup-py"}},[t._v("#")]),t._v(" setup.py")]),t._v(" "),a("p",[t._v("与其他Python库一样，在Pytorch源码的根目录下，有一个文件叫做"),a("code",[t._v("setup.py")]),t._v("，这个文件是Pytorch生成的入口文件，里面定义了Pytorch的构建过程，检查了第三方依赖库的完整性，并且声明了Pytorch的基本信息，比如名字，版本号，描述信息，作者信息等等，这些信息是每一个Python库都需要的。看一下经过简化的"),a("code",[t._v("main")]),t._v("函数：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("   dist "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Distribution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 处理命令行参数")]),t._v("\n   dist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parse_command_line"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 构建依赖库")]),t._v("\n   build_deps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 生成拓展所需的部分")]),t._v("\n   extensions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cmdclass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" packages"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" entry_points"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" install_requires "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" configure_extension_build"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 构成Python库")]),t._v("\n   setup"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("package_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      version"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("version"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      description"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Tensors and Dynamic neural networks in Python with strong GPU acceleration"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      long_description"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("long_description"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      long_description_content_type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text/markdown"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      ext_modules"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("extensions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      cmdclass"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("cmdclass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      packages"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("packages"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      entry_points"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("entry_points"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      install_requires"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("install_requires"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      package_data"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'torch'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n         "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n         "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'caffe2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n         "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      url"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'https://pytorch.org/'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      download_url"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'https://github.com/pytorch/pytorch/tags'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      author"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'PyTorch Team'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      author_email"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'packages@pytorch.org'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      python_requires"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'>={}'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("format")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("python_min_version_str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      license"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'BSD-3'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      keywords"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pytorch machine learning'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"命令行参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命令行参数"}},[t._v("#")]),t._v(" 命令行参数")]),t._v(" "),a("p",[t._v("这个容易理解，Pytorch里面有非常多的选项，比如是否要开启调试信息，是否要启用CUDA，是否要编译测试代码，是否要进行编译分布式的代码，都可以通过向命令行传编译选项来进行控制，而不需要对编译代码进行改动。")]),t._v(" "),a("h3",{attrs:{id:"编译依赖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译依赖"}},[t._v("#")]),t._v(" 编译依赖")]),t._v(" "),a("p",[t._v("接下来是重头戏，这一步编译了所有我们需要的C++库，包括依赖库和Pytorch的源码。主要分为两步：")]),t._v(" "),a("ol",[a("li",[t._v("检查第三方库的源码的完整性。")]),t._v(" "),a("li",[t._v("编译依赖库，libtorch，libc10等。")])]),t._v(" "),a("p",[t._v("还记得我们在下载pytorch源码的时候执行了"),a("code",[t._v("git submodule update --init --recursive")]),t._v("吗，这条命令帮我们下载了Pytorch的依赖库，这些库是托管在其他仓库里的，统一被下载到了"),a("code",[t._v("third_party")]),t._v("下面，在编译之前，第一步是检查一下是否所有所有的依赖库都被完整地下载好，如果有缺失，则会报错并退出。")]),t._v(" "),a("p",[t._v("之后便是使用Cmake对整个工程进行构建，Pytorch对Cmake进行了一个简单的封装，可以在python代码中调用Cmake，具体构建的过程我们下一节详细介绍。")]),t._v(" "),a("h3",{attrs:{id:"整理pytorch需要的拓展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#整理pytorch需要的拓展"}},[t._v("#")]),t._v(" 整理Pytorch需要的拓展")]),t._v(" "),a("p",[t._v("还记得我们上一篇文章讲过，Pytorch以一个拓展的方式与Python代码进行耦合吗，这一部分就整理了Pytorch需要的诸多扩展，最重要的就是"),a("code",[t._v("_C")]),t._v("这个拓展：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 声明一个Python拓展")]),t._v("\n   C "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Extension"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"torch._C"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n               libraries"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"torch_python"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n               sources"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"torch/csrc/stub.c"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n               language"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n               extra_compile_args"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("main_compile_args "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" extra_compile_args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n               include_dirs"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n               library_dirs"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("library_dirs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n               extra_link_args"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("extra_link_args "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" main_link_args "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" make_relative_rpath_args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lib'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   extensions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("C"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("从上面的代码中可以看到，"),a("code",[t._v("_C")]),t._v("的源码是"),a("code",[t._v("torch/csrc/stub.c")]),t._v("，它依赖"),a("code",[t._v("torch_python")]),t._v("这个库。可以说"),a("code",[t._v("_C")]),t._v("是一个入口，真正起作用的是"),a("code",[t._v("torch_python")]),t._v("，这个我们之后细讲。")]),t._v(" "),a("p",[t._v("除了"),a("code",[t._v("_C")]),t._v("之外，Pytorch还需要一些拓展：")]),t._v(" "),a("ol",[a("li",[t._v("_dl：在Unix系统中使用动态库。")]),t._v(" "),a("li",[t._v("shm：共享内存管理的库。")])]),t._v(" "),a("p",[t._v("生成这些拓展后，这一步还会做一些简单的事，比如生成"),a("code",[t._v("setup")]),t._v("需要用到的命令，Pytorch中的资源文件等等。")]),t._v(" "),a("h3",{attrs:{id:"setup"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setup"}},[t._v("#")]),t._v(" setup")]),t._v(" "),a("p",[t._v("最后一步是利用Python通用的生成库的函数"),a("code",[t._v("setup")]),t._v("来最终生成Pytorch这个库。")]),t._v(" "),a("p",[t._v("至此我们走完了Pytorch生成的过程，下一步我们将深入依赖库的编译过程中。")]),t._v(" "),a("h2",{attrs:{id:"cmake"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cmake"}},[t._v("#")]),t._v(" Cmake")]),t._v(" "),a("p",[t._v("上文提到，每一个工程，都会有一个"),a("code",[t._v("CMakeLists.txt")]),t._v("位于根目录中，cmake会将这个文件作为入口，开始编译的过程。在编译过程中，我们可以通过"),a("code",[t._v("add_subdirectory")]),t._v("这个函数来添加一个包含"),a("code",[t._v("CMakeLists.txt")]),t._v("的文件夹，cmake会进入这个文件夹，接着执行其中的"),a("code",[t._v("CMakeLists.txt")]),t._v("，这样可以形成一个树状的结构，直到运行结束所有的代码。这也是一个小技巧，我们可以通过搜索"),a("code",[t._v("add_subdirectory")]),t._v("来明确参与编译的目录。\n我们先进入根目录的CMakeLists。")]),t._v(" "),a("h3",{attrs:{id:"root-cmakelists"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#root-cmakelists"}},[t._v("#")]),t._v(" root cmakelists")]),t._v(" "),a("p",[t._v("在这个文件中，我们做了如下这些事：")]),t._v(" "),a("ol",[a("li",[t._v("声明工程名字，这是CMake必需的")]),t._v(" "),a("li",[t._v("确认使用C++14")]),t._v(" "),a("li",[t._v("确定使用的CPU的架构，可能是INTEL或是AARCH64")]),t._v(" "),a("li",[t._v("列出编译的可选选项，使用setup中的命令行选项")]),t._v(" "),a("li",[t._v("引入Utils工具，用来简化代码")]),t._v(" "),a("li",[t._v("设置版本号")]),t._v(" "),a("li",[a("strong",[t._v("编译第三方依赖库")])]),t._v(" "),a("li",[t._v("根据不同的编译选项设置编译器的flags")]),t._v(" "),a("li",[a("strong",[t._v("核心编译部分")])]),t._v(" "),a("li",[t._v("输出工程小结")])]),t._v(" "),a("p",[t._v("我们需要关注7和9，在第7步中，我们利用Cmake寻找，编译好了"),a("code",[t._v("third_party")]),t._v("中的所有依赖库，在"),a("code",[t._v("third_party")]),t._v("中的每一个文件夹下，都含有一个"),a("code",[t._v("CMakeLists.txt")]),t._v("方便Cmake进行编译。")]),t._v(" "),a("p",[t._v("在第9步中，我们引入了其他文件夹，开始源码的编译过程。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ---[ Main build")]),t._v("\nadd_subdirectory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c10"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nadd_subdirectory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("caffe2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("可以看到，我们引入了"),a("code",[t._v("c10")]),t._v("和"),a("code",[t._v("caffe2")]),t._v("两个文件夹，所以我们下一步就是进去这两个文件夹，看一下其中的编译过程。")]),t._v(" "),a("h3",{attrs:{id:"c10-cmakelists"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c10-cmakelists"}},[t._v("#")]),t._v(" c10 cmakelists")]),t._v(" "),a("p",[a("code",[t._v("c10")]),t._v("是一个独立的库，是Pytorch中Tensor的抽象，一开始位于"),a("code",[t._v("ATen/core")]),t._v("，现在被抽离出来形成了单独的一个库。")]),t._v(" "),a("p",[t._v("为了更好地理解如何构建c10，我们给出精简过的"),a("code",[t._v("CMakeLists.txt")]),t._v("，其中省略了一些选项配置的部分。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 声明Cmake工程")]),t._v("\nproject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c10 CXX"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加c10这个库")]),t._v("\nadd_library"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c10 "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${C10_SRCS}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${C10_HEADERS}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 为c10添加依赖库")]),t._v("\ntarget_link_libraries"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c10 PUBLIC gflags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ntarget_link_libraries"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c10 PUBLIC glog::glog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加c10的剩余部分")]),t._v("\nadd_subdirectory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nadd_subdirectory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("benchmark"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nadd_subdirectory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cuda"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将编译好的库安装到指定位置")]),t._v("\ninstall"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TARGETS c10 EXPORT Caffe2Targets DESTINATION lib"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ninstall"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DIRECTORY "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${CMAKE_CURRENT_LIST_DIR}")]),t._v("\n        DESTINATION include\n        FILES_MATCHING PATTERN "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*.h"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ninstall"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("FILES "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${CMAKE_BINARY_DIR}")]),t._v("/c10/macros/cmake_macros.h\n        DESTINATION include/c10/macros"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("从上述代码中可以看到，我们需要从当前文件夹中搜集c10的源文件和头文件，然后利用他们编译c10这个库，并为c10添加依赖库，然后将生成的库安装到指定位置方便后续使用。")]),t._v(" "),a("p",[t._v("这是一个非常典型的Cmake编译过程，后面我们还会看到类似的代码，这里的逻辑与C++编译的过程是吻合的，不熟悉C++编译过程的读者请自行补充相关知识。")]),t._v(" "),a("h3",{attrs:{id:"caffe-cmakelists"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#caffe-cmakelists"}},[t._v("#")]),t._v(" caffe cmakelists")]),t._v(" "),a("p",[t._v("为了不让文章过于冗长，我隐藏了很多与配置编译选项有关的代码，只保留了代码生成和库定义的代码，这些代码可以帮助我们梳理Pytorch编译的过程，帮助我们梳理Pytorch的结构，如果需要更详细的对于编译代码的分析，请读者自行阅读源码。")]),t._v(" "),a("p",[t._v("让我们开始最核心的，位于"),a("code",[t._v("caffe2")]),t._v("文件夹中的"),a("code",[t._v("CMakeLists.txt")]),t._v("。")]),t._v(" "),a("p",[t._v("首先，我们引入另一个子文件"),a("code",[t._v("${ROOT}/cmake/Codegen.cmake")]),t._v("，在这个文件中，Pytorch"),a("strong",[t._v("动态生成")]),t._v("了ATen所需要的代码，这是一个很关键的点。关于ATen代码的动态生成，我们将在下一篇文章中介绍，在这里不展开讲解。")]),t._v(" "),a("p",[t._v("生成部分源代码之后，Pytorch选择了ATen的并行后端，可供选择的后端有：")]),t._v(" "),a("ol",[a("li",[t._v("NATIVE")]),t._v(" "),a("li",[t._v("OMP -> OpenMP")]),t._v(" "),a("li",[t._v("TBB")])]),t._v(" "),a("p",[t._v("之后开始了ATen的编译，我们通过"),a("code",[t._v("add_subdirectory(../aten aten)")]),t._v("进入ATen文件夹。在这里，我们并没有直接将ATen的源代码编译为一个独立的库，而是将所有ATen的源代码收集起来，然后传递回"),a("code",[t._v("caffe2")]),t._v("中，以供后续使用。")]),t._v(" "),a("p",[t._v("一般来说，我们不需要用到"),a("code",[t._v("caffe2")]),t._v("，所以我们选择忽略掉大部分我们不需要的"),a("code",[t._v("caffe2")]),t._v("模块，只留下了：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("add_subdirectory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("core"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nadd_subdirectory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("serialize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nadd_subdirectory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("utils"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nadd_subdirectory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("perfkernels"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nadd_subdirectory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("proto"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("我们之前收集的ATen源代码，会并入Cafee2的源代码，但由于我们没有包含"),a("code",[t._v("caffe2")]),t._v("模块，所以其他大部分代码还是ATen的，之后我们将ATen编译为"),a("code",[t._v("torch_cpu")]),t._v("，从这里开始真正构建"),a("code",[t._v("libtorch")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("APPEND Caffe2_CPU_SRCS "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${GENERATED_CXX_TORCH}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${GENERATED_H_TORCH}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建torch_cpu库")]),t._v("\nadd_library"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("torch_cpu "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${Caffe2_CPU_SRCS}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("之后便是一些与"),a("code",[t._v("c10")]),t._v("中类似的结构，用于生成库，并为库添加依赖，如下代码所示：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 给 torch_cpu 添加链接库")]),t._v("\ntarget_link_libraries"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("torch_cpu PUBLIC c10"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ncaffe2_interface_library"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("torch_cpu torch_cpu_library"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 生成 torch_cuda 库")]),t._v("\ncuda_add_library"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("torch_cuda "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${Caffe2_GPU_SRCS}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${Caffe2_GPU_SRCS_W_SORT_BY_KEY}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ntarget_link_libraries"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("torch_cuda INTERFACE torch::cudart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ntarget_link_libraries"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("torch_cuda PUBLIC c10_cuda torch::nvtoolsext"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ntarget_link_libraries"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("torch_cuda PUBLIC torch_cpu_library "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${Caffe2_PUBLIC_CUDA_DEPENDENCY_LIBS}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ncaffe2_interface_library"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("torch_cuda torch_cuda_library"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 生成 torch 库")]),t._v("\nadd_library"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("torch "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${DUMMY_EMPTY_FILE}")]),t._v("\ncaffe2_interface_library"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("torch torch_library"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ntarget_link_libraries"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("torch PUBLIC torch_cpu_library"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ntarget_link_libraries"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("torch PUBLIC torch_cuda_library"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("从上面的代码中我们容易看到，"),a("code",[t._v("libtorch")]),t._v("只是一个外壳，里面包含了两个独立的库，"),a("code",[t._v("libtorch_cpu")]),t._v("和"),a("code",[t._v("lib_torch_cuda")]),t._v("，我们之后会用到的，也均是"),a("code",[t._v("libtorch")]),t._v("。同时注意到，他们都取了别名，在后续的构建中，都会使用别名来指代对应的库。")]),t._v(" "),a("p",[t._v("我们完成这些库的构建后，还需要编译Python绑定(python binding)，借助"),a("code",[t._v("add_subdirectory(../torch torch)")]),t._v("来进行编译。")]),t._v(" "),a("h3",{attrs:{id:"torch-cmakelists"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#torch-cmakelists"}},[t._v("#")]),t._v(" torch cmakelists")]),t._v(" "),a("p",[t._v("直接贴上源码，这部分很容易梳理：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TORCH_PYTHON_SRCS\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${GENERATED_THNN_CXX}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${GENERATED_CXX_PYTHON}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nadd_library"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("torch_python SHARED "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${TORCH_PYTHON_SRCS}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ntarget_link_libraries"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("torch_python torch_library "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${TORCH_PYTHON_LINK_LIBRARIES}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ninstall"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TARGETS torch_python DESTINATION "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${TORCH_INSTALL_LIB_DIR}")]),t._v('"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("之前生成了一些代码，然后这些代码编译成了Pytorch的Python绑定。")]),t._v(" "),a("p",[t._v("至此，Pytorch的编译完成。")]),t._v(" "),a("h2",{attrs:{id:"编译过程中到底发生了什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译过程中到底发生了什么"}},[t._v("#")]),t._v(" 编译过程中到底发生了什么")]),t._v(" "),a("p",[t._v("Pytorch的编译过程涉及了太多与Cmake和C++相关的知识，如果对他们不熟悉的读者，理解起来可能会有些吃力。")]),t._v(" "),a("p",[t._v("所谓编译过程，其实就是盖房子，通过给定的图纸，一步一步建起一座大楼。\nPytorch中包含了许多C++库，编译主要就是要生成它们。每一个库都需要源代码，包含源文件和头文件，一个库还可能会依赖于其他库，这个时候就需要进行链接，最终形成一个库，这就是我们在上文中做的事情，不断寻找源文件，编译成库，再将这些库按需要链接在一起。")]),t._v(" "),a("h2",{attrs:{id:"从中梳理pytorch的结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从中梳理pytorch的结构"}},[t._v("#")]),t._v(" 从中梳理Pytorch的结构")]),t._v(" "),a("p",[t._v("Pytorch就是这样一个库，一个混杂着python，c++和c的库，但每个部分都各司其职，井然有序，我们用一张图来对它的架构进行表示。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(306),alt:"Pytorch架构图"}})]),t._v(" "),a("p",[t._v("我们也可以使用"),a("code",[t._v("ldd")]),t._v("命令得到类似的结果，如下：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("_C.cpython-36m-x86_64-linux-gnu.so "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("/pytorch/torch/_C.cpython-36m-x86_64-linux-gnu.so "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("interpreter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" none"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   libtorch_python.so "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("/pytorch/torch/lib/libtorch_python.so\n      libshm.so "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("/pytorch/torch/lib/libshm.so\n      libtorch.so "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("/pytorch/torch/lib/libtorch.so\n      libtorch_cpu.so "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("/pytorch/torch/lib/libtorch_cpu.so\n      libtorch_cuda.so "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("/pytorch/torch/lib/libtorch_cuda.so\n      libc10_cuda.so "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("/pytorch/torch/lib/libc10_cuda.so\n      libc10.so "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("/pytorch/torch/lib/libc10.so\n")])])]),a("p",[t._v("我们再回顾一下Pytorch中几个大的模块：")]),t._v(" "),a("ol",[a("li",[t._v("c10：Tensor的核心抽象，从ATen/core中抽离出来。")]),t._v(" "),a("li",[t._v("ATen：Pytorch与Caffe2公用的计算后端。")]),t._v(" "),a("li",[t._v("Caffe2：另一个深度学习框架，源于Caffe。")]),t._v(" "),a("li",[t._v("Torch：Pytorch的源码，包含python与c++，c++部分位于"),a("code",[t._v("csrc")]),t._v("文件夹中。")])]),t._v(" "),a("p",[t._v("所以现在出现了两个方向，如果想了解具体的计算部分，可以查看"),a("code",[t._v("c10")]),t._v("和"),a("code",[t._v("ATen")]),t._v("，如果想了解Pytorch内部的代码逻辑，比如自动微分以及模型推理，可以查看"),a("code",[t._v("Torch")]),t._v("。当然我们这个系列两个方向都会深入下去。")]),t._v(" "),a("h2",{attrs:{id:"结语"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结语"}},[t._v("#")]),t._v(" 结语")]),t._v(" "),a("p",[t._v("相信各位读者现在已经明白了Pytorch的整体架构，理解架构对我们阅读源码是很有帮助的一件事。")]),t._v(" "),a("p",[t._v("这篇文章比较长，里面也包含了较多代码上的细节，如果想要了解更详细的内容，需要读者亲自深入源码。"),a("strong",[t._v("同时也欢迎对文章有疑惑，有意见，有建议的读者与我们一同交流。")])]),t._v(" "),a("p",[t._v("下一篇文章，我们将深入ATen的源码生成部分。")])])}),[],!1,null,null,null);a.default=r.exports}}]);